from core import PluginCore
from core import PluginManager

l = PluginManager.getLogger()
class interface(PluginCore.BasePlugin):
    def __init__(self):
        super().__init__()
        self.codename = "加载目标"
    def output(self, params=None):
        return {params["Output"]:self.targetList}

    def addTargetList(self, data):
        if not hasattr(self, "targetList"):
            self.targetList = []
        if isinstance(data, list):
            self.targetList += data
        elif isinstance(data, str):
            self.targetList.append(data)
        else:
            raise("目标类型错误")
    def run(self, options=None):
        try:
            _config = options["Params"]
            if "path" not in _config or _config["path"] == None:
                if "target" not in _config:
                    #请求输入目标
                    self.targetList += [str(input("配置中未检测到目标，请手动输入>"))]
                elif _config["target"] != "" or _config["target"] is not None:
                    self.addTargetList(_config["target"])
                    l.d_(f"Get Target: {self.targetList}")

        except Exception as e:
            l.e_(f"{e}，退出插件！")


        return super().run(options)
