from core import PluginCore
from core import PluginManager

l = PluginManager.getLogger()
class interface(PluginCore.BasePlugin):
    def __init__(self):
        super().__init__()
        self.codename = "端口扫描脚本"
    def parseNmapResult(self, path="/tmp/p.xml"):
        # 从xml文件中提取扫描结果
        from bs4 import BeautifulSoup
        _root = BeautifulSoup(open(path, "r"), 'html.parser')
        _ports = []
        for _elem in _root.find_all("port"):
            _temp = {}

            _temp['portid'] = _elem['portid']
            _temp['protocol'] = _elem['protocol']
            _temp['state'] = _elem.state['state']
            _temp['name'] = _elem.service['name'] if _elem.service is not None else None
            _ports.append(_temp)
        return _ports
    def output(self, params=None):
        l.d_("正在按照设置处理插件输出")
        _tempOutput = self.parseNmapResult()
        return {params["Output"] : self.parseNmapResult()}
    def myExec(self, cmd):
        # https://cloud.tencent.com/developer/article/1453972
        import subprocess
        outBuffer = []
        try:
            # Linux Only
            # TODO Windows Administrator
            return_info = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
            while True:
                next_line = return_info.stdout.readline()
                return_line = next_line.decode("utf-8", "ignore")
                if return_line == '' and return_info.poll() != None:
                    break
                outBuffer.append(str(return_line))
            returncode = return_info.wait()
            if returncode:
                raise subprocess.CalledProcessError(returncode, return_info)
        except Exception as e:
            l.e_(e)
        finally:
            return '\n'.join(outBuffer)
    def run(self, options=None):
        try:
            # 依照保留的键Input的值获取上一个插件的运行结果
            _exResult = options[options["Input"]]
            _ip = ' '.join(_exResult)
            _cmd = options["Params"]["cmd"]
            _cmd = _cmd.format(ip=_ip)
            l.d_("Running: " + _cmd)
            l.w_("ATTENTION!! This module must require ROOT priviliage!!")
            self._cmdOutput = self.myExec(_cmd)
            l.d_("CMD result: " + self._cmdOutput)
        except Exception as e:
            l.e_(f"{e}，退出插件！")
        return super().run(options)
